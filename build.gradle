plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group 'it.osm.gtfs'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    implementation("com.google.guava:guava:31.1-jre")
    implementation 'org.json:json:20220924'
    implementation 'org.fusesource.jansi:jansi:2.4.0'


    implementation files('libs/graphhopper-core-7.0-SNAPSHOT-modded.jar')

    implementation ('com.graphhopper:graphhopper-map-matching:7.0-pre1') {
        //exclude group: 'com.graphhopper', module: 'graphhopper-core'

    }

    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.1' //questo è da rimuovere quando la versione modificata di graphhopper-core non sarà più necessaria, credo
    implementation 'org.slf4j:slf4j-simple:2.0.5' //anche questa come quello sopra

    implementation 'org.jxmapviewer:jxmapviewer2:2.6'

    implementation 'info.picocli:picocli:4.7.0'
    implementation 'info.picocli:picocli-shell-jline3:4.7.0'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.0'

    implementation 'org.mapfish.geo:mapfish-geo-lib:1.2.0'

    implementation 'org.openstreetmap.osmosis:osmosis-xml:0.48.3'
    implementation 'org.openstreetmap.osmosis:osmosis-set:0.48.3'

    implementation 'it.tidalwave.betterbeansbinding:betterbeansbinding-swingbinding:1.3.0'
    implementation 'commons-lang:commons-lang:2.6' //esiste la release 3 comunque

    shadow 'junit:junit:3.8.2'
}

//needed for Picocli
compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}


shadowJar { /*il plugin shadowJar per Gradle fa al caso nostro per creare un file fat jar contenente tutte le dipendenze del progetto:
    il problema sorge quando si cerca di includere le librerie Osmosis: ognuni modulo di osmosis (noi siamo usando il modulo osmosis-xml e osmosis-set)
    contiene un file osmosis-plugins.conf che indica la classpath del plugin da caricare.
    Quando gradle cerca di includere questi plugin in un file jar essendoci piu' file duplicati osmosis-plugins.conf ne puo' includere soltanto uno di essi.
    La soluzione sarebbe fare un merge di questi file, infatti shadowJar permette di farlo in modo automatico.
    */

    archiveBaseName.set('shadow')
    archiveClassifier.set('')
    archiveVersion.set('')

    manifest {
        attributes 'Main-Class': 'it.osm.gtfs.GTFSOSMImport'
    }
    configurations = [project.configurations.compileClasspath]
    append 'osmosis-plugins.conf' //questo comando serve per effettuare il merge dei file osmosis-plugins.conf duplicati
}

/*
jar {
    manifest {
        attributes(
                'Main-Class': 'it.osm.gtfs.GTFSOSMImport',
        )
    }

    duplicatesStrategy = DuplicatesStrategy.WARN

    from {
        //configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }

        println(configurations.runtimeClasspath)
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }


} */


test {
    useJUnitPlatform()
}